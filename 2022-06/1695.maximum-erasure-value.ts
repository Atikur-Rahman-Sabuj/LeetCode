/*
 * @lc app=leetcode id=1695 lang=typescript
 *
 * [1695] Maximum Erasure Value
 */

maximumUniqueSubarray([
   826, 164, 439, 310, 813, 633, 474, 248, 42, 455, 484, 195, 849, 279, 800, 708, 253, 410, 902, 391, 395, 415, 172,
   885, 695, 703, 531, 780, 904, 626, 811, 528, 546, 55, 206, 364, 358, 223, 669, 534, 160, 458, 256, 730, 451, 906, 96,
   748, 174, 611, 711, 138, 141, 554, 650, 900, 226, 140, 152, 571, 861, 83, 385, 694, 671, 566, 60, 79, 768, 32, 692,
   998, 24, 988, 793, 208, 337, 34, 744, 973, 260, 306, 511, 832, 199, 823, 812, 8, 473, 652, 38, 987, 650, 613, 834,
   477, 648, 528, 414, 972, 230, 168, 493, 762, 434, 385, 42, 27, 284, 598, 969, 621, 320, 996, 564, 681, 568, 980, 860,
   598, 285, 66, 645, 201, 821, 931, 261, 448, 530, 926, 470, 924, 898, 816, 762, 883, 443, 61, 248, 444, 680, 816, 289,
   675, 860, 143, 97, 655, 243, 136, 850, 387, 899, 283, 975, 854, 22, 489, 647, 98, 94, 45, 287, 787, 955, 341, 807,
   790, 222, 828, 442, 854, 268, 111, 727, 158, 457, 548, 452, 218, 807, 535, 22, 203, 461, 497, 716, 46, 478, 423, 145,
   504, 852, 93, 273, 761, 236, 110, 370, 278, 127, 316, 595, 726, 11, 372, 166, 730, 404, 162, 456, 184, 918, 111, 256,
   220, 4, 40, 525, 738, 772, 25, 710, 160, 474, 449, 981, 776, 757, 139, 948, 712, 928, 883, 90, 640, 884, 49, 179,
   829, 167, 272, 961, 615, 526, 658, 58, 575, 291, 38, 707, 217, 601, 897, 495, 378, 405, 948, 378, 787, 361, 955, 316,
   537, 197, 343, 828, 264, 558, 197, 190, 361, 827, 263, 166, 172, 194, 873, 292, 740, 870, 747, 262, 252, 386, 458,
   623, 733, 802,
]);

// @lc code=start
function maximumUniqueSubarray(nums: number[]): number {
   let result = 0;
   let sum = 0;
   let start = 0;
   const map: Map<number, number> = new Map();
   for (let i = 0; i < nums.length; i++) {
      if (i == 92) {
         console.log(nums[i]);
      }
      result = Math.max(result, sum);
      if (map.has(nums[i])) {
         const j = map.get(nums[i]) as number;
         while (j >= start) {
            sum -= nums[start];
            map.delete(nums[start]);
            start++;
         }
      }
      map.set(nums[i], i);
      sum += nums[i];
   }
   console.log(Math.max(result, sum));
   return Math.max(result, sum);
}
// @lc code=end

// checkMap();
// function checkMap() {
//    const map: Map<number, number> = new Map();
//    map.set(1, 1);
//    map.set(2, 2);
//    map.delete(1);
//    map.set(1, 5);
//    console.log(map);
//    return 5;
// }
